# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_pb2 as grpc__pb2


class DiscoveryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExchangeNode = channel.unary_unary(
                '/Discovery/ExchangeNode',
                request_serializer=grpc__pb2.Node.SerializeToString,
                response_deserializer=grpc__pb2.Node.FromString,
                )
        self.Hello = channel.unary_unary(
                '/Discovery/Hello',
                request_serializer=grpc__pb2.Message.SerializeToString,
                response_deserializer=grpc__pb2.Message.FromString,
                )


class DiscoveryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExchangeNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Hello(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DiscoveryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExchangeNode': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeNode,
                    request_deserializer=grpc__pb2.Node.FromString,
                    response_serializer=grpc__pb2.Node.SerializeToString,
            ),
            'Hello': grpc.unary_unary_rpc_method_handler(
                    servicer.Hello,
                    request_deserializer=grpc__pb2.Message.FromString,
                    response_serializer=grpc__pb2.Message.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Discovery', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Discovery(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExchangeNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Discovery/ExchangeNode',
            grpc__pb2.Node.SerializeToString,
            grpc__pb2.Node.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Hello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Discovery/Hello',
            grpc__pb2.Message.SerializeToString,
            grpc__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SynchronizationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BlockFrom = channel.unary_unary(
                '/Synchronization/BlockFrom',
                request_serializer=grpc__pb2.Message.SerializeToString,
                response_deserializer=grpc__pb2.Block.FromString,
                )
        self.BlockTo = channel.unary_unary(
                '/Synchronization/BlockTo',
                request_serializer=grpc__pb2.Block.SerializeToString,
                response_deserializer=grpc__pb2.Message.FromString,
                )
        self.ExchangeBlock = channel.unary_unary(
                '/Synchronization/ExchangeBlock',
                request_serializer=grpc__pb2.Block.SerializeToString,
                response_deserializer=grpc__pb2.Block.FromString,
                )
        self.TransactionTo = channel.unary_unary(
                '/Synchronization/TransactionTo',
                request_serializer=grpc__pb2.Transaction.SerializeToString,
                response_deserializer=grpc__pb2.Message.FromString,
                )
        self.TransactionFrom = channel.unary_unary(
                '/Synchronization/TransactionFrom',
                request_serializer=grpc__pb2.Message.SerializeToString,
                response_deserializer=grpc__pb2.Transaction.FromString,
                )


class SynchronizationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BlockFrom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockTo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeBlock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransactionTo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransactionFrom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SynchronizationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BlockFrom': grpc.unary_unary_rpc_method_handler(
                    servicer.BlockFrom,
                    request_deserializer=grpc__pb2.Message.FromString,
                    response_serializer=grpc__pb2.Block.SerializeToString,
            ),
            'BlockTo': grpc.unary_unary_rpc_method_handler(
                    servicer.BlockTo,
                    request_deserializer=grpc__pb2.Block.FromString,
                    response_serializer=grpc__pb2.Message.SerializeToString,
            ),
            'ExchangeBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeBlock,
                    request_deserializer=grpc__pb2.Block.FromString,
                    response_serializer=grpc__pb2.Block.SerializeToString,
            ),
            'TransactionTo': grpc.unary_unary_rpc_method_handler(
                    servicer.TransactionTo,
                    request_deserializer=grpc__pb2.Transaction.FromString,
                    response_serializer=grpc__pb2.Message.SerializeToString,
            ),
            'TransactionFrom': grpc.unary_unary_rpc_method_handler(
                    servicer.TransactionFrom,
                    request_deserializer=grpc__pb2.Message.FromString,
                    response_serializer=grpc__pb2.Transaction.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Synchronization', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Synchronization(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BlockFrom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Synchronization/BlockFrom',
            grpc__pb2.Message.SerializeToString,
            grpc__pb2.Block.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlockTo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Synchronization/BlockTo',
            grpc__pb2.Block.SerializeToString,
            grpc__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Synchronization/ExchangeBlock',
            grpc__pb2.Block.SerializeToString,
            grpc__pb2.Block.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransactionTo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Synchronization/TransactionTo',
            grpc__pb2.Transaction.SerializeToString,
            grpc__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransactionFrom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Synchronization/TransactionFrom',
            grpc__pb2.Message.SerializeToString,
            grpc__pb2.Transaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
